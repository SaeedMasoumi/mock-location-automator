apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion Version.compileSdk
    buildToolsVersion Version.buildTools


    defaultConfig {
        minSdkVersion Version.minSdk
        targetSdkVersion Version.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${Version.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${Version.coroutine}"
    implementation "com.google.android.gms:play-services-location:${Version.playServices}"
    implementation "junit:junit:${Version.junit}"
    implementation "androidx.test:core:${Version.androidxTest}"
    implementation "androidx.test.espresso:espresso-core:${Version.espresso}"
    androidTestImplementation "androidx.test:runner:${Version.androidxTest}"
    androidTestImplementation "androidx.test:rules:${Version.androidxTest}"
    androidTestImplementation "androidx.test.ext:junit:${Version.androidxTestExt}"
}

publish {
    userOrg = ''
    groupId = 'io.saeid.automator'
    artifactId = 'mock-location-automator'
    publishVersion = Version.artifact
    desc = 'Mock location during Android instrumentation tests.'
    website = 'https://github.com/SaeedMasoumi/mock-location-automator'
}

jacoco {
    toolVersion = "0.8.4"
}

project.afterEvaluate {
    def testTaskName = "testDebugUnitTest"
    def uiTestCoverageTaskName = "createDebugCoverageReport"

    task jacocoTestReport(type: JacocoReport, dependsOn: ["$testTaskName", "$uiTestCoverageTaskName"]) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the debug build."

        reports {
            html.enabled = true
            xml.enabled = true
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*'
        ]
        def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: excludes)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
        classDirectories = files([javaClasses, kotlinClasses])

        sourceDirectories = files([
                "$project.projectDir/src/main/java",
        ])

        executionData = files([
                "${project.buildDir}/jacoco/${testTaskName}.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ])
    }
}